‚îú‚îÄ‚îÄ /html               --> Contiene las vistas HTML (login, registro, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ login.html
‚îÇ
‚îú‚îÄ‚îÄ /css                --> Estilos CSS usados en las p√°ginas
‚îÇ   ‚îî‚îÄ‚îÄ login.css
‚îÇ
‚îú‚îÄ‚îÄ /js                 --> L√≥gica en JavaScript para validaci√≥n del lado cliente
‚îÇ   ‚îî‚îÄ‚îÄ login.js
‚îÇ
‚îú‚îÄ‚îÄ /img                --> Im√°genes del sitio web (logo, iconos, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ logo.png
‚îÇ
‚îú‚îÄ‚îÄ /routes             --> Define las rutas que recibe el servidor (por ejemplo, /login)
‚îÇ   ‚îî‚îÄ‚îÄ login.js
‚îÇ
‚îú‚îÄ‚îÄ /controllers        --> Contiene la l√≥gica del backend (controladores)
‚îÇ   ‚îî‚îÄ‚îÄ loginController.js
‚îÇ
‚îú‚îÄ‚îÄ /config             --> Archivos de configuraci√≥n como la conexi√≥n a la base de datos
‚îÇ   ‚îî‚îÄ‚îÄ db.js
‚îÇ
‚îú‚îÄ‚îÄ app.js              --> Archivo principal del servidor Express (punto de entrada)
‚îî‚îÄ‚îÄ package.json        --> Define las dependencias del proyecto y scripts

Detalles de funcionamiento:
Frontend (Cliente):

HTML: todas las interfaces est√°n en la carpeta /html.

CSS: los estilos personalizados para cada vista est√°n en /css.

JS: validaciones de formularios o interacciones en /js.

Estas vistas se sirven como contenido est√°tico desde app.js.

Backend (Servidor Node.js):

Usa Express para manejar peticiones HTTP.

Las rutas se definen en /routes, y cada una llama a un controlador en /controllers.

La conexi√≥n a la base de datos MySQL se define en /config/db.js.


# MediDent - Sistema de Gesti√≥n Odontol√≥gica
Sistema web en desarrollo para registro, agenda de turnos y gesti√≥n de citas en una cl√≠nica odontol√≥gica.

---

## üß± Estructura de Carpetas

/html
  ‚Üí Contiene todas las vistas HTML del sistema:
     - login.html
     - registro.html
     - calendario.html
     - agendar_cita.html
     - doctores.html
     - visualizar_cita.html
     - opciones.html

/css
  ‚Üí Estilos CSS personalizados para cada vista.

/js
  ‚Üí L√≥gica en JavaScript para validaciones y simulaciones en frontend.

/imagenes
  ‚Üí Recursos visuales: logo, √≠conos de opciones, etc.

/routes
  ‚Üí Rutas que gestionan los formularios (login y registro).

/controllers
  ‚Üí L√≥gica backend de las rutas: validaciones y simulaciones de base de datos.

/config
  ‚Üí Archivo de conexi√≥n a la base de datos MySQL (a ser implementado por backend).

app.js
  ‚Üí Servidor principal de Express, configura rutas y archivos est√°ticos.

package.json
  ‚Üí Define dependencias del proyecto Node.js.

---

## üîê Flujo del Usuario (Cliente)

1. Inicia sesi√≥n desde `login.html` (correo + contrase√±a).
2. Es redirigido a `opciones.html`.
3. Desde all√≠ puede:
   - Ver calendario (`calendario.html`)
   - Agendar cita (`agendar_cita.html`)
   - Ver profesionales (`doctores.html`)
   - Ver citas agendadas (`visualizar_cita.html`)

---

## üì¶ Funciones Simuladas por Ahora

- D√≠as ocupados del calendario se almacenan en `localStorage["diasOcupados"]`.
- Las citas agendadas se simulan con `localStorage["citasSimuladas"]`.
- Toda la l√≥gica futura ser√° conectada a la base de datos MySQL.

---

## üß™ C√≥mo Ejecutar el Proyecto

1. Instalar dependencias:
   npm install

2. Ejecutar servidor local:
   node app.js

3. Acceder desde navegador:
   http://localhost:3000

---

## üõ† A implementar por backend

- Validaci√≥n real en base de datos para login y registro
- Guardado y consulta de citas
- Control de sesiones y roles (cliente / funcionario)
- Gesti√≥n de disponibilidad por profesional

---

Proyecto dise√±ado por: Gustavo
Frontend completo y funcional.
Listo para conexi√≥n con backend y base de datos.
